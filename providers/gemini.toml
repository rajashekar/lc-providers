endpoint = "https://generativelanguage.googleapis.com"
models = []
models_path = "/v1beta/models/"
chat_path = "/v1beta/models/{model}:generateContent"
images_path = "/v1beta/models/{model}:generateContent"
speech_path = "/v1beta/models/{model}:generateContent"

# add key using "lc keys add gemini" or "lc k a gemini"
[headers]
x-goog-api-key = "${api_key}"

[vars]

[chat_templates.""]
request = '''
{
  "contents": [
    {%- for message in messages %}
    {%- if message.role == "system" %}
    {
      "role": "user",
      "parts": [{"text": "{{ message.content_type.content | default(value="System message") | replace(from='"', to='\\"') }}"}]
    },
    {
      "role": "model",
      "parts": [{"text": "I understand. I'll follow these instructions."}]
    }{%- if not loop.last %},{% endif %}
    {%- elif message.role == "user" %}
    {
      "role": "user",
      "parts": [{"text": "{{ message.content_type.content | default(value=message.content | default(value="User message")) | replace(from='"', to='\\"') }}"}]
    }{%- if not loop.last %},{% endif %}
    {%- elif message.role == "assistant" %}
    {
      "role": "model",
      "parts": [{"text": "{{ message.content_type.content | default(value=message.content | default(value="Assistant message")) | replace(from='"', to='\\"') }}"}]
    }{%- if not loop.last %},{% endif %}
    {%- elif message.role == "tool" %}
    {
      "role": "function",
      "parts": [{"functionResponse": {"name": "{{ message.tool_call_id }}", "response": {"result": "{{ message.content_type.content | default(value=message.content | default(value="Tool response")) | replace(from='"', to='\\"') }}"}}}]
    }{%- if not loop.last %},{% endif %}
    {%- endif %}
    {%- endfor %}
  ],
  {%- if tools %}
  "tools": [
    {
      "functionDeclarations": [
        {%- for tool in tools %}
        {
          "name": "{{ tool.function.name }}",
          "description": "{{ tool.function.description | default(value="") }}",
          "parameters": {{ tool.function.parameters | tojson }}
        }{%- if not loop.last %},{% endif %}
        {%- endfor %}
      ]
    }
  ],
  {%- endif %}
  "generationConfig": {
    {%- if max_tokens %}
    "maxOutputTokens": {{ max_tokens }}{%- if temperature %},{% endif %}
    {%- endif %}
    {%- if temperature %}
    "temperature": {{ temperature }}
    {%- endif %}
  }
}
'''
response = """
{
  "content": {% if candidates[0].content.parts and candidates[0].content.parts[0].text %}{{ candidates[0].content.parts[0].text | json }}{% elif candidates[0].finishReason == "MAX_TOKENS" %}"I apologize, but I reached the maximum token limit while processing your request. The response was truncated. Please try asking a more specific question or break down your request into smaller parts."{% else %}"No response content available."{% endif %}
}
"""

# Images endpoint templates for Gemini image generation via generateContent
[images_templates.""]
request = """
{
  "contents": [
    {
      "role": "user",
      "parts": [
        { "text": "{{ prompt | replace(from='"', to='\\"') }}" }
      ]
    }
  ],
  "generationConfig": {
    "responseModalities": ["TEXT","IMAGE"]{% if n %}, "candidateCount": {{ n }}{% endif %}
  }
}
"""
response = """
{
  "data": [
    {% for part in candidates[0].content.parts %}
      {% if part.inlineData and part.inlineData.data %}
        { "b64_json": "{{ part.inlineData.data }}" }{% if not loop.last %},{% endif %}
      {% endif %}
    {% endfor %}
  ]
}
"""

# Speech endpoint templates for Gemini text-to-speech via generateContent
[speech_templates.""]
request = """
{
  "contents": [
    {
      "parts": [
        { "text": "{{ input | replace(from='"', to='\\"') }}" }
      ]
    }
  ],
  "generationConfig": {
    "responseModalities": ["AUDIO"],
    "speechConfig": {
      "voiceConfig": {
        "prebuiltVoiceConfig": {
          "voiceName": "{{ voice | default(value="Kore") }}"
        }
      }
    }
  }
}
"""
response = """
"{{ candidates[0].content.parts[0].inlineData.data }}"
"""
